generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  ratings       Rating[]
  feedbacks     Feedback[]
  wishlist      Wishlist[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String
  stock       Int
  category    String
  brand       String
  wishlist    Wishlist[]
  createdAt   DateTime   @default(now())
  ratings     Rating[]
}

model Order {
  id                String      @id @default(cuid())
  userId            String? // optional for guest checkout
  user              User?       @relation(fields: [userId], references: [id])
  total             Float
  status            OrderStatus @default(SUCCESS) // ✅ new
  deliveryDate      DateTime? // ✅ new
  razorpayOrderId   String
  razorpayPaymentId String
  razorpaySignature String
  createdAt         DateTime    @default(now())
  items             OrderItem[]
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  order     Order  @relation(fields: [orderId], references: [id])
  productId String
  name      String
  imageUrl  String
  quantity  Int
  price     Float
}

enum OrderStatus {
  SUCCESS
  PENDING
  DELIVERED
  CANCELLED
  FAILED
}

model Rating {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  stars     Int
  comment   String? // optional review
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // ✅ user can rate each product once
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  message   String
  pageUrl   String
  createdAt DateTime @default(now())
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // prevents duplicates
}
